时间复杂度
    1.一个算法是由控制结构（顺序、分支和循环3种）和原操作（指固有数据类型的操作）构成的，则算法时间取决于两者的综合效果
    2.一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。
    3.若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。
      记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度
      T (n) ≤ C * f(n)
    4.
     常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜…＜Ο(2n)＜Ο(n!)
	

计算算法时间复杂度
    1.输入输出语句或赋值语句,近似认为需要O(1)时间
    2.对于顺序结构，求和法则
    3.对于循环结构，T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1*T2=O(f(n)*g(n))


空间复杂度
   空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度